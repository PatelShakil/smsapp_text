//calling fun like the students profile header we need to implement callback like onDownloadClick(StudentDetailsItem)
//then we need to handle these callback inside our StudentDashboardMainScreen()

StudentProfileSection(
            StudentsProfileData(
                "",
                "John Doe",
                "10",
                "B",
                "13",
                R.drawable.qr_code_image
            )
        ) {it->
//onDownloadClick callback
            if (checkPermission(context)) {
                viewModel.downloadPDFFile(
                    it.admissionno,
                    "${it.name}_${it.admissionno}_${
                        System.currentTimeMillis().toString().substring(8)
                    }.pdf"
                ) { file ->
                    when (file) {
                        is Resource.Loading -> {
                        }

                        is Resource.Failure -> {
                        }

                        is Resource.Success -> {
                            ViewPDF(file.result?.absolutePath!!, context)
                        }

                        else -> {}
                    }
                }
            } else {
                checkPermission(context)
                viewModel.downloadPDFFile(
                    it.admissionno,
                    "${it.name}_${it.admissionno}_${
                        System.currentTimeMillis().toString().substring(8)
                    }.pdf"
                ) { file ->
                    when (file) {
                        is Resource.Loading -> {
                        }

                        is Resource.Failure -> {
                        }

                        is Resource.Success -> {
                            ViewPDF(file.result?.absolutePath!!, context)
                        }

                        else -> {}
                    }
                }
            }
        }



//viewModel code

fun downloadPDFFile(url: String, fileName: String, onPdfDownload: (Resource<File?>) -> Unit) =
        viewModelScope.launch {
            repo.downloadPDFFile(url, fileName) {
                onPdfDownload(it)
            }
        }


//Repo Interface

import com.mycampus.smsapp.data.Resource
import java.io.File

interface DownloadProfile {
    suspend fun downloadPDFFile(
        admissionid: String,
        fileName: String,
        onPdfDownload: (Resource<File?>) -> Unit
    )
}


//Repo code ****IMP****


package com.mycampus.smsapp.data.repo.student.profile

import com.mycampus.smsapp.data.Resource
import io.ktor.client.HttpClient
import io.ktor.client.request.get
import io.ktor.client.request.header
import io.ktor.client.request.parameter
import io.ktor.client.request.url
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.io.File
import java.io.FileOutputStream
import java.io.InputStream
import javax.inject.Inject

class DownloadProfileImpl @Inject constructor(
    val httpClient: HttpClient
) : DownloadProfile {
    override suspend fun downloadPDFFile(
        admissionid: String,
        fileName: String,
        onPdfDownload: (Resource<File?>) -> Unit
    ) {
        withContext(Dispatchers.IO) {
            try {
                onPdfDownload(Resource.Loading)
                val storageDir = "/storage/emulated/0/Download/myCampus"
                if (!File(storageDir).exists())
                    File(storageDir).mkdirs()
                val file = File(storageDir, fileName)
                if (!file.exists())
                    file.createNewFile()

                val byteArray = httpClient.get<ByteArray> {
                    url("http://devapi.mycampus.co.in/api/v1/Student/pdfform")
                    parameter("admissionid", admissionid)
                    header(
                        "MODI",
                        "3LWBgoDbDDS4nZOBmb3EI4RDknn8MaH3KJPVJnL5C5KldBY3O6tW4N3bNZRP"
                    )
                }
                val inputStream: InputStream = byteArray.inputStream()
                val outputStream = FileOutputStream(file)

                val buffer = ByteArray(4096)
                var bytesRead: Int = inputStream.read(buffer)
                while (bytesRead != -1) {
                    outputStream.write(buffer, 0, bytesRead)
                    bytesRead = inputStream.read(buffer)
                }

                outputStream.close()
                inputStream.close()

                onPdfDownload(Resource.Success(file))
            } catch (e: Exception) {
                e.printStackTrace()
                onPdfDownload(
                    Resource.Failure(
                        200,
                        "Error Occurred in Downloading Pdf",
                        "Error Occurred"
                    )
                )
            }
        }
    }
}


//required functions


fun ViewPDF(filePath: String, ctx: Context) {
//    if (checkPermission(ctx)) {
    val file = FileProvider.getUriForFile(
        ctx,
        "com.mycampus.smsapp.fileprovider",
        File(filePath)
    )
    val intent = Intent(Intent.ACTION_VIEW)
    intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP
    intent.setDataAndType(file, "application/pdf")
    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
    val chooserIntent = Intent.createChooser(intent, "Open PDF with")
    chooserIntent.flags = Intent.FLAG_ACTIVITY_NEW_TASK
    try {
        ctx.startActivity(chooserIntent)
    } catch (e: Exception) {
        e.printStackTrace()
    }
//    } else {
    // Request permissions
//    ActivityCompat.requestPermissions(
//        ctx as Activity, arrayOf(
//            Manifest.permission.WRITE_EXTERNAL_STORAGE,
//            Manifest.permission.READ_EXTERNAL_STORAGE
//        ), 1
//    )
//    }
}

fun checkPermission(ctx: Context): Boolean {
    val permissions = arrayOf(
        Manifest.permission.WRITE_EXTERNAL_STORAGE,
        Manifest.permission.READ_EXTERNAL_STORAGE
    )

    val grantResults = permissions.map {
        ContextCompat.checkSelfPermission(ctx, it)
    }.toIntArray()

    val isPermissionGranted = grantResults.all { it == PackageManager.PERMISSION_GRANTED }

    if (!isPermissionGranted) {
        ActivityCompat.requestPermissions(ctx as Activity, permissions, 1)
    }

    return isPermissionGranted
}
