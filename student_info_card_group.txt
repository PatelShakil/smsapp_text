//code in AppTheme{}

val studentDetails=viewModel.studentsDetails.collectAsState()
        studentDetails.value?.let {
            when (it){
                is Resource.Failure -> {
                    if(it.errorMsgBody.contains("204"))
                        onAPIFailed("No data for Student Details ",false)
                    else
                        onAPIFailed("Student Details Info (${it.errorCodeDescription}-${it.errorCode})")

                }
                Resource.Loading -> {
                    FullScreenProgressbar()
                }
                is Resource.Success -> {
                    if (it.result.isEmpty()) {
                        //Need to Handle Empty Screen
                    } else {
                        StudentInfoCardGroup(studentItemArray = it.result, navController = navController){
                                isName: Boolean, isRoll: Boolean, isAdm: Boolean, isAc: Boolean ->
                            viewModel.getStudentFilterData(isName,isRoll,isAdm,isAc)
                        }
                    }
                }
            }
        }



//viewmodel code
//just add this function in viewmodel

fun getStudentFilterData(isName: Boolean, isRoll: Boolean, isAdm: Boolean, isAc: Boolean){
        if(isName){
            _studentsDetails.value.let {resource ->
                when(resource){
                    is Resource.Success ->{
                        _studentsDetails.value = Resource.Success(ArrayList(resource.result.sortedBy { it.studentdetails.firstname }) )
                    }
                    else -> {}
                }
            }
        }else if(isRoll){
            _studentsDetails.value.let {resource ->
                when(resource){
                    is Resource.Success ->{
                        _studentsDetails.value = Resource.Success(ArrayList(resource.result.sortedBy { it.studentdetails.rollno }) )
                    }
                    else -> {}
                }
            }
        }else if(isAdm){
            _studentsDetails.value.let {resource ->
                when(resource){
                    is Resource.Success ->{
                        _studentsDetails.value = Resource.Success(ArrayList(resource.result.sortedBy { it.studentdetails.admissionno }) )
                    }
                    else -> {}
                }
            }
        }else if(isAc){
            _studentsDetails.value.let {resource ->
                when(resource){
                    is Resource.Success ->{
                        _studentsDetails.value = Resource.Success(ArrayList(resource.result.sortedBy { it.bankdetails?.accountnumber }) )
                    }
                    else -> {}
                }
            }
        }
    }




//studentgroupcard code replace with old

@Composable
fun StudentInfoCardGroup(studentItemArray: ArrayList<HomeViewModel.StudentInfo>, navController: NavController,getFilterData:(isName: Boolean, isRoll: Boolean, isAdm: Boolean, isAc: Boolean) -> Unit) {
    Column {
        var totalCount = studentItemArray.size
        var maleCount =
            studentItemArray.filter { it.studentdetails.gender.uppercase() == "MALE" }.size
        var femaleCount =
            studentItemArray.filter { it.studentdetails.gender.uppercase() == "FEMALE" }.size
        StudentFilterRow(onFilterCheckedChange = { isName: Boolean, isRoll: Boolean, isAdm: Boolean, isAc: Boolean ->
            getFilterData(isName, isRoll, isAdm, isAc)
        })
        StudentTopLegendCard(totalCount, maleCount, femaleCount)
        LazyColumn {
            items(studentItemArray) { studentDTO ->
                StudentInfoCard(
                    admissionType = studentDTO.admissiontypename,
                    studentDBuid = studentDTO.webappid,
                    classid = studentDTO.studentdetails.classid,
                    classname = studentDTO.studentdetails.classname,
                    sectionid = studentDTO.studentdetails.sectionid,
                    sectionName = studentDTO.studentdetails.section,
                    name = "${studentDTO.studentdetails.firstname} ${studentDTO.studentdetails.middlename} ${studentDTO.studentdetails.lastname}",
                    fathername = studentDTO.studentdetails.fathername,
                    schoolAdmissionNo = studentDTO.admissionnumber,
                    contactNo = studentDTO.studentdetails.mobilenumber,
                    gender = studentDTO.studentdetails.gender,
                    imageURL = studentDTO.photograph?.first { it.photographtype == "Student" }?.filepath.toString(),
                    navController = navController,
                    ews = studentDTO.studentdetails.ews,
                    rte = studentDTO.studentdetails.rtecategory,
                    pwd = studentDTO.studentdetails.physicallychallenged,
                    staffward = studentDTO.studentdetails.staffchild,
                    singlegirlchild = studentDTO.studentdetails.singlechild,
                    rollNo = studentDTO.studentdetails.rollno,
                    feeAccountNo = studentDTO.studentdetails.feeledgreno,
                    onClick = {
                        //viewModel.setCurrentFee(item)
                        //navController.navigate(StudentAppScreen.Fee.FeeDetails.route)
                    })
            }
            item { Spacer(modifier = Modifier.padding(55.dp)) }
        }
    }
}


//required function

@Composable
fun StudentFilterRow(
    onFilterCheckedChange: (isName: Boolean, isRoll: Boolean, isAdm: Boolean, isAc: Boolean) -> Unit
) {
    val spacing = MaterialTheme.spacing
    var isName by remember { mutableStateOf(false) }
    var isRoll by remember { mutableStateOf(false) }
    var isAdm by remember { mutableStateOf(false) }
    var isAC by remember { mutableStateOf(false) }

    Card(modifier = Modifier.fillMaxWidth()
        .padding(start = spacing.medium, end = spacing.medium, top = spacing.medium)
    ) {
        Column(modifier = Modifier.fillMaxWidth(),
        horizontalAlignment = Alignment.CenterHorizontally) {
            Spacer(modifier = Modifier.height(5.dp))
            Row(
                modifier = Modifier.fillMaxWidth(.95f),
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.Center
            ) {
                CustomFilterChip(isChecked = isName, label = "Name", onCheckedChange = {
                    isName = it
                    if (isName) {
                        isRoll = false
                        isAdm = false
                        isAC = false
                    }
                    onFilterCheckedChange(isName, isRoll, isAdm, isAC)
                })
                Spacer(modifier = Modifier.width(15.dp))
                CustomFilterChip(isChecked = isRoll, label = "Roll No.", onCheckedChange = {
                    isRoll = it
                    if (isRoll) {
                        isName = false
                        isAdm = false
                        isAC = false
                    }
                    onFilterCheckedChange(isName, isRoll, isAdm, isAC)
                })
                Spacer(modifier = Modifier.width(15.dp))
                CustomFilterChip(isChecked = isAdm, label = "Admission", onCheckedChange = {
                    isAdm = it
                    if (isAdm) {
                        isName = false
                        isRoll = false
                        isAC = false
                    }
                    onFilterCheckedChange(isName, isRoll, isAdm, isAC)
                })
                Spacer(modifier = Modifier.width(15.dp))
                CustomFilterChip(isChecked = isAC, label = "A/C", onCheckedChange = {
                    isAC = it
                    if (isAC) {
                        isName = false
                        isRoll = false
                        isAdm = false
                    }
                    onFilterCheckedChange(isName, isRoll, isAdm, isAC)
                })
            }
        }
        Spacer(modifier = Modifier.height(5.dp))

    }
}


@Composable
fun StudentTopLegendCard(
    totalCount: Int, maleCount: Int, femaleCount: Int, isFeeWindow: Boolean = false
) {
    val spacing = MaterialTheme.spacing
    Card(modifier = Modifier
        .fillMaxWidth()
        .wrapContentHeight()
        .padding(start = spacing.medium, end = spacing.medium, top = spacing.medium)
        .clickable { }) {
        Column(
            //modifier = Modifier.padding(spacing.medium)
            //modifier = Modifier.background(Color(0xFFF3D9D5), RoundedCornerShape(12.dp))
            modifier = Modifier.background(LightMainColor, RoundedCornerShape(12.dp))
        ) {
            Row {
                Text(
                    text = "Total Results ( ${totalCount} )",
                    style = MaterialTheme.typography.bodyMedium,
                    modifier = Modifier
                        .padding(top = spacing.small)
                        .weight(1f),
                    textAlign = TextAlign.Center,
                    fontWeight = FontWeight.Bold,
                )
            }

            Divider(modifier = Modifier.padding(bottom = spacing.small))

            if (isFeeWindow) {
                Row {
                    Row(
                        modifier = Modifier.weight(1f), horizontalArrangement = Arrangement.Center
                    ) {
                        Text(
                            text = "Unpaid - ${femaleCount}",
                            style = MaterialTheme.typography.bodyMedium,
                            textAlign = TextAlign.Center,
                            fontWeight = FontWeight.Bold,
                            modifier = Modifier.padding(start = 4.dp)
                        )
                    }
                    Row(
                        modifier = Modifier.weight(1f), horizontalArrangement = Arrangement.Center
                    ) {
                        Text(
                            text = "Paid - ${maleCount}",
                            style = MaterialTheme.typography.bodyMedium,
                            textAlign = TextAlign.Center,
                            fontWeight = FontWeight.Bold,
                            modifier = Modifier.padding(start = 4.dp)
                        )
                    }
                }
            } else {
                Row {
                    Row(
                        modifier = Modifier.weight(1f), horizontalArrangement = Arrangement.Center
                    ) {
                        Box(
                            modifier = Modifier
                                .height(20.dp)
                                .width(20.dp)
                                .clip(CircleShape)
                                .background(Color(0xFFD3E9E1))
                                .border(1.dp, Color(0xFF05AC64), CircleShape)
                                .padding(end = 3.dp)
                        )
                        Text(
                            text = "Male - ${maleCount}",
                            style = MaterialTheme.typography.bodyMedium,
                            textAlign = TextAlign.Center,
                            fontWeight = FontWeight.Bold,
                            modifier = Modifier.padding(start = 4.dp)
                        )
                    }
                    Row(
                        modifier = Modifier.weight(1f), horizontalArrangement = Arrangement.Center
                    ) {
                        Box(
                            modifier = Modifier
                                .height(20.dp)
                                .width(20.dp)
                                .clip(CircleShape)
                                .background(Color(0xFFE3E1F7))
                                .border(1.dp, Color(0xFF283B5B), CircleShape)
                                .padding(end = 3.dp)
                        )
                        Text(
                            text = "Female - ${femaleCount}",
                            style = MaterialTheme.typography.bodyMedium,
                            textAlign = TextAlign.Center,
                            fontWeight = FontWeight.Bold,
                            modifier = Modifier.padding(start = 4.dp)
                        )
                    }
                }
            }
       
        }
    }
}
