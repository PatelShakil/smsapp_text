//Entry point of screen
        SubjectGroupCallingFun(viewModel = viewModel)



//layout code and functions

@Composable
fun SubjectGroupCallingFun(viewModel: HomeViewModel) {
    Column {
        SubjectTopCard()
        val subjectMapList = viewModel.subjectGroupList.collectAsState()
        subjectMapList.value?.let {
            when(it){
                is Resource.Failure -> {
                    if(it.errorMsgBody.contains("204"))
                        onAPIFailed("No data for Subjects Group ",false)
                    else
                        onAPIFailed("Error Info (${it.errorCodeDescription}-${it.errorCode})")
                }
                is Resource.Loading -> {
                    FullScreenProgressbar()
                }
                is Resource.Success ->{
                    if (it.result.isEmpty()) {
                        //Need to Handle Empty Screen
                    } else {
                        SubjectGroupMainScreen(it.result)
                    }
                }
            }
        }
    }
}
@Composable
fun SubjectGroupMainScreen(list : ArrayList<SubjectMappingItem>) {
    LazyColumn(modifier = Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {
        items(list){
            Spacer(modifier = Modifier.height(10.dp))
            SubjectGroupCardItem(data = it)
        }
    }
}
@Composable
fun SubjectGroupCardItem(data : SubjectMappingItem) {
    Card(modifier = Modifier.fillMaxWidth(.95f),
        elevation = CardDefaults.cardElevation(30.dp),
    border = BorderStroke(.5.dp, Color.Gray)
    ) {
        Column(modifier = Modifier
            .fillMaxWidth()
            .background(Color.White),
        horizontalAlignment = Alignment.CenterHorizontally) {
            Spacer(modifier = Modifier.height(5.dp))
            Row(modifier = Modifier
                .clip(RoundedCornerShape(15.dp))
                .background(LightMainColor)
                .padding(horizontal = 15.dp)) {
                Text(text = "Subject Group - " + data.groupName,
                style = MaterialTheme.typography.bodyMedium)
            }
            Spacer(modifier = Modifier.height(5.dp))
            Column(modifier = Modifier.fillMaxWidth(.95f)) {
                data.classlist.forEach { 
                    Spacer(modifier = Modifier.height(4.dp))
                    ClassListItem(data = it)
                }
            }
            Spacer(modifier = Modifier.height(10.dp))
            Row(modifier = Modifier.fillMaxWidth(.95f), verticalAlignment = Alignment.CenterVertically){
                Column(modifier = Modifier.weight(.7f)) {
                    data.subjectlist.forEachIndexed { index, it ->
                    Spacer(modifier = Modifier.height(3.dp))    
                        SubjectListItem(index+1,data = it)
                    }
                }
                Box(
                    modifier = Modifier
                        .size(70.dp)
                        .clip(CircleShape)
                        .background(LightMainColor),
                    contentAlignment = Alignment.Center
                ){
                    Icon(
                        painter = painterResource(id = R.drawable.ic_books_groups),
                        contentDescription = "",
                        tint = White,
                        modifier = Modifier
                            .size(50.dp)
                    )
                }
                Spacer(modifier = Modifier.width(10.dp))


            }
        }
    }
}
@Composable
fun SubjectListItem(index: Int, data: SubjectInfoItem) {
    Row() {
        Text(text = "$index - ${data.subjectname}",
        style = MaterialTheme.typography.bodySmall)
    }
}
@Composable
fun ClassListItem(data : ClassInfoItem) {
    Row(modifier = Modifier.fillMaxWidth()) {
        Row(Modifier.border(.5.dp, Gray, RoundedCornerShape(15.dp))) {
            Text("Class - " + data.classname,
            modifier = Modifier.padding(horizontal = 5.dp),
            style = MaterialTheme.typography.titleSmall)
        }
        Spacer(modifier = Modifier.width(5.dp))
        Row() {
            data.section?.forEach {
            Spacer(modifier = Modifier.width(4.dp))    
                SectionCardItem( it)
            }
        }
    }
}
@Composable
fun SectionCardItem(data : Section) {
    Box(modifier = Modifier
        .size(28.dp)
        .clip(CircleShape)
        .border(.5.dp, Gray, CircleShape),
    contentAlignment = Alignment.Center){
        Text(text = data.sectionname,
        modifier =Modifier,
            style = MaterialTheme.typography.titleSmall)
    }
}
@Composable
fun SubjectTopCard() {
    val spacing = MaterialTheme.spacing
    val educationalYear = "2023-24"
    androidx.compose.material.Card(modifier = Modifier.fillMaxWidth()) {
        ConstraintLayout(modifier = Modifier.background(Color(0xFFFEFEFE))) {
            val (cardNameText,cardImage,currentYearText) = createRefs()
            androidx.compose.material.Text(text = "Your All Subjects Groups are here!",
                modifier = Modifier
                    .padding(start = spacing.medium, top = spacing.medium / 2)
                    .constrainAs(cardNameText) {
                        top.linkTo(parent.top)
                        start.linkTo(parent.start)
                    }
                    .fillMaxWidth(0.5f)
                    .background(Color(0xFFFEFEFE)),
                style = MaterialTheme.typography.titleMedium,
                color = MainColor,
                fontSize = 19.sp,
                softWrap = true)
            Image(painterResource(id = R.drawable.subjects_topcard), contentDescription = "noticeboard",
                modifier = Modifier
                    .constrainAs(cardImage) {
                        top.linkTo(parent.top)
                        end.linkTo(parent.end)
                    }
                    .height(120.dp)
                    .width(150.dp),
                contentScale = ContentScale.FillBounds)


            Box(modifier = Modifier
                .padding(start = spacing.medium)
                .border(1.dp, Color.Gray, CircleShape)
                .constrainAs(currentYearText) {
                    top.linkTo(cardNameText.bottom)
                    start.linkTo(parent.start)
                    bottom.linkTo(parent.bottom)
                }
                .background(Color.White, CircleShape)) {
                androidx.compose.material.Text(text = "$educationalYear", modifier = Modifier
                    .padding(horizontal = spacing.medium / 2)
                )
            }
        }
    }
}