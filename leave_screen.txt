//entry point
LeaveMainScreen()

//layout code

@Composable
fun LeaveMainScreen() {
    Column(modifier = Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {
        LeaveTopCard()
        Spacer(modifier = Modifier.height(5.dp))
        LeaveCardItem(isStudent = true,"Rajesh Birla",true)
        Spacer(modifier = Modifier.height(5.dp))
        LeaveCardItem(isStudent = false,"Salim Solanki",false)
        Spacer(modifier = Modifier.height(5.dp))
        LeaveCardItem(isStudent = true,"Ibrahim Khalil",false)
        Spacer(modifier = Modifier.height(5.dp))
        LeaveCardItem(isStudent = false,"Vahid Surti",true)
    }
}
@Composable
fun LeaveCardItem(isStudent : Boolean,name :String,isApproved : Boolean) {
    Card(modifier = Modifier.fillMaxWidth(.95f),
    border = BorderStroke(.5.dp, Color.Gray),
        elevation = CardDefaults.cardElevation(30.dp)
    ) {
        Column(modifier = Modifier
            .fillMaxWidth()
            .background(White), horizontalAlignment = Alignment.CenterHorizontally) {
            Spacer(modifier = Modifier.height(5.dp))
            Text(if (isStudent) "$name (9-B)" else name,
            style = MaterialTheme.typography.bodyMedium,
            fontWeight = FontWeight.Black,
            modifier = Modifier
                .fillMaxWidth(.95f),
            textAlign = TextAlign.Start)
            Row(modifier = Modifier.fillMaxWidth(.95f)){
                Column(modifier = Modifier.weight(.7f)) {
                    Text("Type : ${if (isStudent) "Student" else "Teacher"}",
                    style = MaterialTheme.typography.bodySmall,
                    fontWeight = FontWeight.Black)
                    Row {
                        Text(
                            "Status : ",
                            style = MaterialTheme.typography.bodySmall,
                            fontWeight = FontWeight.Black
                        )
                        Text(
                            "${if (isApproved) "Approved" else "Pending"}",
                            style = MaterialTheme.typography.bodySmall,
                            fontWeight = FontWeight.Black,
                            color = if (isApproved) Color(0xFF60B38F) else Color.Red
                        )
                    }
                }
                Box(modifier = Modifier
                    .size(60.dp)
                    .clip(CircleShape)
                    .background(if (isApproved) Color(0xFFA6D9C2) else Color(0xFFFED7D8)),
                contentAlignment = Alignment.Center) {
                    Icon(painter = painterResource(id = R.drawable.ic_leave_dashboard), contentDescription = "",
                    tint = White,
                    modifier = Modifier
                        .size(50.dp))
                }
                Spacer(modifier = Modifier.width(15.dp))
            }
            Spacer(modifier = Modifier.height(5.dp))
            Row(modifier = Modifier.fillMaxWidth(.97f), verticalAlignment = Alignment.CenterVertically){
                Icon(painter = painterResource(id = R.drawable.ic_calender_dashboard), contentDescription = "",
                tint = MainColor)
                Spacer(modifier = Modifier.width(5.dp))
                Text("22-May-2023 9:10 AM",
                    style = MaterialTheme.typography.bodySmall,
                modifier = Modifier
                    .padding(top = 3.dp))
            }
            Spacer(modifier = Modifier.height(5.dp))
        }
    }
}

@Composable
fun LeaveTopCard() {
    val spacing = MaterialTheme.spacing
    val colorBg = Color(0xFFFEFEFE)
    androidx.compose.material.Card(modifier = Modifier.fillMaxWidth()) {
        ConstraintLayout(modifier = Modifier.background(colorBg)) {
            val (cardNameText,cardImage,currentYearText) = createRefs()
            androidx.compose.material.Text(text = "Today's Leave!",
                modifier = Modifier
                    .padding(start = spacing.medium, top = spacing.medium / 2)
                    .constrainAs(cardNameText) {
                        top.linkTo(parent.top)
                        start.linkTo(parent.start)
                    }
                    .fillMaxWidth(0.5f)
                    .background(colorBg),
                style = MaterialTheme.typography.titleMedium,
                color = MainColor,
                fontSize = 19.sp,
                softWrap = true)
            Image(painterResource(id = R.drawable.leave_related), contentDescription = "noticeboard",
                modifier = Modifier
                    .constrainAs(cardImage) {
                        top.linkTo(parent.top)
                        end.linkTo(parent.end)
                    }
                    .height(120.dp)
                    .width(150.dp),
                contentScale = ContentScale.FillBounds)
        }
    }
}