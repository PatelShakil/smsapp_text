package com.mycampus.smsapp.ui.main.studenthome.calendar

import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.Text
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.Divider
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.Color.Companion.White
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Dialog
import androidx.compose.ui.window.DialogProperties
import androidx.constraintlayout.compose.ConstraintLayout
import androidx.core.graphics.toColorInt
import androidx.navigation.NavController
import com.kizitonwose.calendar.core.nextMonth
import com.kizitonwose.calendar.core.previousMonth
import com.mycampus.smsapp.R
import com.mycampus.smsapp.data.Resource
import com.mycampus.smsapp.data.models.calendar.CalenderInfoItem
import com.mycampus.smsapp.ui.common.CalendarTile
import com.mycampus.smsapp.ui.common.EventData
import com.mycampus.smsapp.ui.common.FullScreenProgressbar
import com.mycampus.smsapp.ui.common.onAPIFailed
import com.mycampus.smsapp.ui.main.studenthome.DatePickerDialogCustom
import com.mycampus.smsapp.ui.main.studenthome.screens.expensedashboard.CustomDate
import com.mycampus.smsapp.ui.main.studenthome.screens.expensedashboard.DropDownCategory
import com.mycampus.smsapp.ui.main.studenthome.screens.expensedashboard.ledger.AddLedgerTextField
import com.mycampus.smsapp.ui.main.studenthome.todayactivity.DropDownItemData
import com.mycampus.smsapp.ui.theme.MainColor
import com.mycampus.smsapp.ui.theme.Pink80
import com.mycampus.smsapp.ui.theme.spacing
import java.time.LocalDate
import java.time.YearMonth

@Composable
fun CalendarScreen(viewModel: CalendarViewModel, navController: NavController) {

    var calenderEventList = viewModel.calenderEventList.collectAsState()
    calenderEventList.value?.let {
        when (it) {
            is Resource.Failure -> {
                if (it.errorMsgBody.contains("204"))
                    onAPIFailed("No data for calender ", false)
                else
                    onAPIFailed("calender Info (${it.errorCodeDescription}-${it.errorCode})")
            }

            Resource.Loading -> {
                FullScreenProgressbar()
            }

            is Resource.Success -> {
                if (it.result.isEmpty()) {
                    //Need to Hanlde Empty Screen
                } else {
                    var calenderEventList = mutableListOf<EventData>()
                    it.result.forEach {
                        calenderEventList.add(
                            EventData(
                                it.name,
                                it.eventtypename,
                                LocalDate.of(it.startyear, it.startmonth, it.startday),
                                Color(it.eventtypecolor.toColorInt())
                            )
                        )
                    }
                    CalendarMainScreen(calenderEventList, true, viewModel)
                }
            }
        }
    }
}


@Composable
fun CalendarMainScreen(
    eventsList: List<EventData>,
    isAdmin: Boolean,
    viewModel: CalendarViewModel
) {
    val selectedDate = remember { mutableStateOf(LocalDate.now()) }
    val isSelected = remember { mutableStateOf(false) }
    val month = remember { mutableStateOf(YearMonth.now()) }
    var isAddClick by remember { mutableStateOf(false) }
    var selectedNewList =
        remember { mutableStateOf(eventsList.filter { it.eventDate.monthValue == YearMonth.now().monthValue }) }
    ConstraintLayout(modifier = Modifier.fillMaxSize()) {
        val (calenderItem, eventListColumn, eventsHeaderText, fab) = createRefs()
        Box(modifier = Modifier
            .constrainAs(calenderItem)
            {
                top.linkTo(parent.top)
            }
            .fillMaxWidth()) {
            CalendarTile(
                eventsList, filterListOnSelection = { date, isSelectedCheck ->
                    selectedDate.value = date.date
                    isSelected.value = isSelectedCheck
                    selectedNewList.value = emptyList()
                    if (isSelected.value) {
                        selectedNewList.value =
                            eventsList.filter { it.eventDate.month.name == month.value.month.name }
                    } else
                        selectedNewList.value =
                            eventsList.filter { it.eventDate == selectedDate.value }.toList()
                },
                onMonthChanged = { it, loc ->
                    month.value = it
                    if (loc)
                        selectedNewList.value =
                            eventsList.filter { it.eventDate.monthValue == month.value.nextMonth.monthValue }
                    else
                        selectedNewList.value =
                            eventsList.filter { it.eventDate.monthValue == month.value.previousMonth.monthValue }

                })
        }
        Text(text = "List of Events", modifier = Modifier
            .constrainAs(eventsHeaderText) {
                top.linkTo(calenderItem.bottom)
                start.linkTo(parent.start)
            }
            .padding(start = 15.dp, top = MaterialTheme.spacing.large),
            fontWeight = FontWeight.Bold)

        Column(modifier = Modifier
            .constrainAs(eventListColumn) {
                top.linkTo(eventsHeaderText.bottom)
                start.linkTo(parent.start)
                end.linkTo(parent.end)
            }
            .fillMaxWidth(0.95f),
            horizontalAlignment = Alignment.CenterHorizontally) {
            EventCardGroup(eventList = selectedNewList.value)

        }
        if (isAdmin) {
            FloatingActionButton(
                onClick = {
                    isAddClick = !isAddClick
                },
                modifier = Modifier
                    .padding(30.dp)
                    .constrainAs(fab) {
                        bottom.linkTo(parent.bottom)
                        end.linkTo(parent.end)
                    }
            ) {
                Icon(
                    imageVector = Icons.Default.Add, "",
                    tint = MainColor
                )
            }
        }
        if (isAddClick) {
            AddCalendarEventPopupScreen(onDismiss = {
                isAddClick = !isAddClick
            }, onConfirm = {
                viewModel.createCalendarEvent(it)
            })
        }
    }
}

@Composable
fun AddCalendarEventPopupScreen(
    isEdit: Boolean = false,
    onDismiss: () -> Unit,
    onConfirm: (CalenderInfoItem) -> Unit
) {
    val eventItem =
        CalenderInfoItem("", "", 0, 0, 0, "", "", 0, "0", "", 0, "", "", 0, 0, 0, 0, "", false)
    Dialog(
        onDismissRequest = {
            onDismiss()
        },
        properties = DialogProperties(
            usePlatformDefaultWidth = false
        )
    ) {
        var isBtnEnabled by remember { mutableStateOf(false) }
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(bottom = 20.dp)
                .background(Color.Transparent)
                .clickable {
                    onDismiss()
                },
            verticalArrangement = Arrangement.Bottom,
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Card(modifier = Modifier
                .fillMaxWidth(.95f)
                .clickable { }) {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .background(White),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(25.dp)
                            .background(White),
                        horizontalArrangement = Arrangement.Center,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Divider(
                            modifier = Modifier
                                .height(6.dp)
                                .width(50.dp)
                                .clip(RoundedCornerShape(3.dp)),
                            color = MainColor
                        )
                    }
                    Spacer(modifier = Modifier.height(10.dp))
                    androidx.compose.material3.Text(
                        "${if (isEdit) "Update" else "Add"} Event",
                        style = MaterialTheme.typography.titleSmall,
                        color = MainColor,
                        fontWeight = FontWeight.Bold,
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(start = 30.dp)
                    )
                    Spacer(modifier = Modifier.height(5.dp))
                    Column(
                        modifier = Modifier.fillMaxWidth(.95f),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        var startDate by remember {
                            mutableStateOf(
                                CustomDate(
                                    LocalDate.now().dayOfMonth.toString(),
                                    LocalDate.now().monthValue.toString(),
                                    LocalDate.now().year.toString()
                                )
                            )
                        }
                        var endDate by remember {
                            mutableStateOf(
                                CustomDate(
                                    LocalDate.now().dayOfMonth.toString(),
                                    LocalDate.now().monthValue.toString(),
                                    LocalDate.now().year.toString()
                                )
                            )
                        }
                        Spacer(modifier = Modifier.height(5.dp))
                        DropDownCategory(
                            label = "Type",
                            selectedItem = DropDownItemData("", ""),
                            list = listOf(DropDownItemData("1", "Holiday")),
                            onSelect = {
                                eventItem.eventtypeid = it.id.toInt()
                                isBtnEnabled =
                                    eventItem.eventtypeid != 0 && eventItem.startdate != "" && eventItem.enddate != "" && eventItem.name != "" && eventItem.description != ""
                            }
                        )

                        var isEndDateGreater by remember { mutableStateOf(false) }
                        DatePickerDialogCustom(
                            label = "Start Date",
                            onDateSelect = { date, month, year ->
                                eventItem.startdate = "$year-$month-$date"
                                startDate = CustomDate(date, month, year)
                                isEndDateGreater =
                                    startDate.date.toInt() > endDate.date.toInt() || startDate.month.toInt() > endDate.month.toInt()
                                isBtnEnabled =
                                    eventItem.eventtypeid != 0 && eventItem.startdate != "" && eventItem.enddate != "" && eventItem.name != "" && eventItem.description != ""
                            })
                        Log.d("Start Date", startDate.toString())
                        Log.d("End Date", endDate.toString())
                        DatePickerDialogCustom(
                            label = "End Date",
                            onDateSelect = { date, month, year ->
                                eventItem.enddate = "$year-$month-$date"
                                endDate = CustomDate(date, month, year)
                                Log.d("start", startDate.toString())
                                Log.d("end", endDate.toString())
                                isEndDateGreater =
                                    startDate.date.toInt() > endDate.date.toInt() || startDate.month.toInt() > endDate.month.toInt()
                                isBtnEnabled =
                                    eventItem.eventtypeid != 0 && eventItem.startdate != "" && eventItem.enddate != "" && eventItem.name != "" && eventItem.description != "" && !isEndDateGreater
                            })
                        if (isEndDateGreater) {
                            androidx.compose.material3.Text(
                                "*end date must be greater or equal to start date",
                                style = MaterialTheme.typography.titleSmall,
                                fontSize = 12.sp,
                                color = Color.Red
                            )
                        }
                        AddLedgerTextField(
                            icon = R.drawable.ic_sticky_note_2_blue_50,
                            label = "Name",
                            onTextChanged = {
                                eventItem.name = it
                                isBtnEnabled =
                                    eventItem.eventtypeid != 0 && eventItem.startdate != "" && eventItem.enddate != "" && eventItem.name != "" && eventItem.description != ""
                            })
                        AddLedgerTextField(
                            icon = R.drawable.ic_assignment_dashboard,
                            label = "Description",
                            onTextChanged = {
                                eventItem.description = it
                                isBtnEnabled =
                                    eventItem.eventtypeid != 0 && eventItem.startdate != "" && eventItem.enddate != "" && eventItem.name != "" && eventItem.description != ""
                            })
                        Spacer(modifier = Modifier.height(5.dp))
                        DropDownCategory(
                            label = "Status",
                            selectedItem = DropDownItemData(
                                eventItem.status.toString(),
                                if (eventItem.status == 1) "Enable" else "Disable"
                            ),
                            list = listOf(
                                DropDownItemData("1", "Enable"),
                                DropDownItemData("0", "Disable")
                            ),
                            onSelect = {
                                if (it.id == "1")
                                    eventItem.status = 1
                                else
                                    eventItem.status = 0
                                isBtnEnabled =
                                    eventItem.eventtypeid != 0 && eventItem.startdate != "" && eventItem.enddate != "" && eventItem.name != "" && eventItem.description != ""
                            }
                        )
                        Spacer(modifier = Modifier.height(5.dp))
                        Log.d("EventItem", eventItem.toString())

                        Button(modifier = Modifier
                            .fillMaxWidth(.9f),
                            enabled = isBtnEnabled,
                            onClick = {
                                onConfirm(eventItem)
                                onDismiss()
                            }) {
                            androidx.compose.material3.Text(if (isEdit) "Update" else "Add")
                        }
                    }
                    Spacer(modifier = Modifier.height(10.dp))
                }
            }
        }
    }
}

@Composable
fun EventCardGroup(eventList: List<EventData>) {
    LazyColumn {
        items(eventList) {
            EventItemCard(it)
        }
    }
}

@Composable
fun EventItemCard(event: EventData) {
    val spacing = MaterialTheme.spacing
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = spacing.medium / 2)
            .border(1.dp, Color.Gray, RoundedCornerShape(10.dp))
    ) {
        ConstraintLayout(
            modifier = Modifier
                .fillMaxWidth()
                .wrapContentHeight()
                .background(Color.White)
        ) {
            val (dateBox, eventNameText, eventDay, eventMonth) = createRefs()
            Box(modifier = Modifier
                .constrainAs(dateBox) {
                    top.linkTo(parent.top)
                    start.linkTo(parent.start)
                    bottom.linkTo(parent.bottom)
                }
                .width(spacing.medium * 4)
                .background(event.eventColor)) {
                Text(
                    text = event.eventDate.dayOfMonth.toString(),
                    textAlign = TextAlign.Center,
                    fontSize = 22.sp,
                    color = White,
                    modifier = Modifier
                        .padding(vertical = spacing.medium, horizontal = spacing.medium)
                        .fillMaxWidth()
                )
            }
            Text(modifier = Modifier
                .constrainAs(eventNameText) {
                    start.linkTo(dateBox.end)
                    top.linkTo(parent.top)
                }
                .fillMaxWidth()
                .padding(start = spacing.medium, top = 2.dp),
                text = "${event.eventDate.dayOfWeek.name}, ${event.eventDate.month.name} ${event.eventDate.year}",
                fontSize = 12.sp)
            Text(text = event.eventType,
                modifier = Modifier
                    .constrainAs(eventMonth) {
                        top.linkTo(eventNameText.bottom)
                        start.linkTo(dateBox.end)
                    }
                    .padding(start = spacing.medium),
                fontSize = 13.sp)
            Text(text = event.eventName,
                modifier = Modifier
                    .constrainAs(eventDay) {
                        top.linkTo(eventMonth.bottom)
                        start.linkTo(dateBox.end)
                    }
                    .padding(start = spacing.medium),
                color = Pink80,
                fontSize = 14.sp)
        }
    }
}